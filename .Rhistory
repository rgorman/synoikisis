svd(A)
5*.56
-3/-3
6/-3
-5/-5
-25/-5
28/8
P <- matrix( c(1, -2, 7,
0, 1, 10,
0, 0, 2), 3, 3, byrow = TRUE )
P
A <- matrix( c(1, -6, 2,
0, 4, 25,
0, 0, 9), 3, 3, byrow = TRUE )
A
inv(P)
(inv(P) %*% A)
(inv(P) %*% A) %*% P
A %*% P
P <- matrix( c(1, -2, 3.5,
0, 1, 5,
0, 0, 1), 3, 3, byrow = TRUE )
A %*% P
(inv(P) %*% A) %*% P
P <- matrix( c(1, -2, -7,
0, 1, 10,
0, 0, 2), 3, 3, byrow = TRUE )
A %*% P
(inv(P) %*% A) %*% P
A <- matrix( c(1, 0,
0, 1), 2, 2, byrow = TRUE )
A
inv(A)
(inv(P) %*% A) %*% P
A <- matrix( c(1, 0,
0, 2), 2, 2, byrow = TRUE )
inv(A)
(inv(P) %*% A) %*% P
nv(P)
inv(P)
P
P <- matrix( c(1, 0,
0, 1), 2, 2, byrow = TRUE )
P
(inv(P) %*% A) %*% P
A <- matrix( c(1, 1,
1, 1), 2, 2, byrow = TRUE )
inv(A)
A <- matrix( c(3, 0,
4, 4), 2, 2, byrow = TRUE )
A
eigen(A)
P <- matrix( c(-1, 0,
4, 1), 2, 2, byrow = TRUE )
(inv(P) %*% A) %*% P
A <- matrix( c(2, 2,
1, 3), 2, 2, byrow = TRUE )
P <- matrix( c(1, 1,
-2, 1), 2, 2, byrow = TRUE )
(inv(P) %*% A) %*% P
eigen(A)
P <- matrix( c(1, -1,
-2, -1), 2, 2, byrow = TRUE )
(inv(P) %*% A) %*% P
P <- matrix( c(1, 1,
1, -2), 2, 2, byrow = TRUE )
(inv(P) %*% A) %*% P
inv(P)
(inv(P) %*% A)
P
A
install.packages("rmarkdown", repos="https://cloud.r-project.org")
options(repos = c(CRAN = "https://cran.revolutionanalytics.com"))
options(repos = c(CRAN = "https://cran.revolutionanalytics.com"))
install.packages("markdowm")
install.packages("markdown")
knitr::opts_chunk$set(echo = TRUE)
install.packages("yaml")
plot(cars)
install.packages("evaluate")
plot(cars)
update.packages(ask = FALSE, repos = 'http://cran.rstudio.org')
install.packages("tidyverse")
require(tidyverse)
install.packages("Rcpp")
require(tidyverse)
require(dplyr)
install.packages("Rcpp")
install.packages("dplyr")
require(dplyr)
install.packages("pillar")
setwd("~/synoikisis")
require(xml2)
require(dplyr)
require(stringr)
require(magrittr)
require(entropy)
input.dir <- "../input_data/" # sets this directory holding treebank files. This code must be adjusted to reflect your own directory structure.
files.v <- dir(path=input.dir, pattern=".*xml") # A vector with names of each XML file  from input directory.
files.v
doc.xml <- read_xml(file.path(input.dir, files.v[3]))
sent.xml <- xml_find_all(doc.xml, "//sentence")
for (i in seq_along(sent.xml)) {
word.l <- sent.xml[[i]] %>%
xml_find_all("word") %>%
xml_attrs()
word.l <- word.l[which(lengths(word.l) == 7)]
sent.workng.m <- unlist(word.l)  %>%
matrix(ncol = 7, byrow = TRUE)
colnames(sent.workng.m) <- c("id", "form", "lemma", "postag", "relation", "head", "cite")
sent.tib <-  as_tibble(sent.workng.m)
sent.tib$id <- sent.tib$id %>%
as.numeric()
sent.tib$head <- sent.tib$head %>%
as.numeric()
sent.tib <- sent.tib %>%
mutate(arc_direction = NA)
sent.tib <- sent.tib[- which(str_detect(sent.tib$relation, "Aux[xkgXKG]") == TRUE) , ]
for (j in seq_len(nrow(sent.tib))) {
if (is.numeric(sent.tib$head[j]) ) {
if (sent.tib$head[j] %>%
is_in( sent.tib$id)) {
if (sent.tib$id[j] < sent.tib$head[j]) {sent.tib$arc_direction[j] <- "parent_follows"}
if (sent.tib$id[j] > sent.tib$head[j]) {sent.tib$arc_direction[j] <- "parent_precedes"}
}
}
}
sent.tib <- sent.tib %>%
mutate(part_of_speech = NA)
for (k in seq_len(nrow(sent.tib))) {
if (str_detect(sent.tib$postag[k], "^-")) {
} else {
if (str_detect(sent.tib$postag[k], "^[a-z]") )
postag <-  str_extract(sent.tib$postag[k], "^[a-z]")
if (postag == "v") {
sent.tib$part_of_speech[k] <- "verb"
}
if (postag == "n") {
sent.tib$part_of_speech[k] <- "noun"
}
if (postag == "p") {
sent.tib$part_of_speech[k] <- "pronoun"
}
if (postag == "c") {
sent.tib$part_of_speech[k] <- "conjunction"
}
if (postag == "d") {
sent.tib$part_of_speech[k] <- "adverb"
}
if (postag == "l") {
sent.tib$part_of_speech[k] <- "def_article"
}
if (postag == "r") {
sent.tib$part_of_speech[k] <- "preposition"
}
if (postag == "a") {
sent.tib$part_of_speech[k] <- "adjective"
}
if (postag == "u") {
sent.tib$part_of_speech[k] <- "punctuation"
}
if (postag == "NA") {
sent.tib$part_of_speech[k] <- NA
}
}
}
sent.tib <- sent.tib %>%
mutate(parent_POS = NA)
sent.tib <- sent.tib %>%
mutate(parent_relation = NA)
y <- sent.tib$id
for (p in seq_len(nrow(sent.tib))) {
x <- sent.tib$head[p]
if (x %in% y) {
if (x > 0) {
sent.tib$parent_POS[p] <- sent.tib$part_of_speech[which(sent.tib$id == x) ]
sent.tib$parent_relation[p] <- sent.tib$relation[which(sent.tib$id == x) ]
}
}
}
if ( i == 1) {
result.tib <- sent.tib
} else {
result.tib <- bind_rows(result.tib, sent.tib)
}
}
word.count.tb <- result.tib$lemma %>%
table()
wd.ct.tib <- wd.ct.tib %>%
arrange(desc(n))
result.tib$lemma
word.count.tb <- result.tib$lemma %>%
table()
wd.ct.tib
word.count.tb <- result.tib$lemma %>%
table()
word.count.tb
wd.ct.tib <- word.count.tb %>%
as_tibble()
wd.ct.tib <- wd.ct.tib %>%
arrange(desc(n))
which(wd.ct.tib$n == 1) %>%
length()
View(wd.ct.tib)
word.count.tb <- result.tib$lemma %>%
table()
wd.ct.tib <- word.count.tb %>%
as_tibble()
View(wd.ct.tib)
word.count.tb
wd.ct.tib <- word.count.tb %>%
as_tibble()
names(word.count.tb)
colnames(word.count.tb)
wd.ct.tib
colnames(wd.ct.tib)
colnames(wd.ct.tib) <- c("lemma", "count")
colnames(wd.ct.tib)
wd.ct.tib <- wd.ct.tib %>%
arrange(desc(n))
wd.ct.tib <- wd.ct.tib %>%
arrange(desc(count))
View(wd.ct.tib)
wd.ct.tib
wd.ct.tib[11:20, ]
wd.ct.tib[21, ]
wd.ct.tib %>%
mutate(pt_of_tokens = count / 29179)
wd.ct.tib <- wd.ct.tib %>%
mutate(pt_of_tokens = count / 29179)
wd.ct.tib$pt_of_tokens[1] + wd.ct.tib$pt_of_tokens[4]
sum(wd.ct.tib$pt_of_tokens[1:21])
sum(wd.ct.tib$pt_of_tokens[1:41])
sum(wd.ct.tib$pt_of_tokens[1:61])
sum(wd.ct.tib$pt_of_tokens[1:81])
sum(wd.ct.tib$pt_of_tokens[1:101])
sum(wd.ct.tib$pt_of_tokens[1:201])
sum(wd.ct.tib$pt_of_tokens[1:301])
wd.ct.tib[301, ]
wd.ct.tib <- wd.ct.tib %>%
mutate(per_10k = pt_of_tokens * 10000)
wd.ct.tib[301, ]
wd.ct.tib[2:31, ]
wd.ct.tib[22:31, ]
wd.ct.tib[32:41, ]
which(wd.ct.tib$count < 3)
which(wd.ct.tib$count < 3) %>%
length()
sum(wd.ct.tib$pt_of_tokens[1:1292])
which(wd.ct.tib$count == 1) %>%
length()
which(wd.ct.tib$n == 1)
which(wd.ct.tib$count == 1)
which(wd.ct.tib$count == 1) %>%
length()
which(wd.ct.tib$count == 2) %>%
length()
which(wd.ct.tib$count == 2)
View(result.tib)
result.tib$lemma[1]
wd.ct.tib$lemma[1293]
result.tib$lemma[1] %in% wd.ct.tib$lemma[1293]
result.tib$lemma[1] %in% wd.ct.tib$lemma[1293:3833]
less_than_3 <- NULL
for (i in 1:100) {
less_than_3 <- append(less_than_3, result.tib$lemma[i] %in% wd.ct.tib$lemma[1293:3833])
}
less_than_3
which(less_than_3 == TRUE)
View(result.tib)
result.tib$form[1:10]
result.tib[1:10, 1:2]
result.tib[1:20, 1:2]
result.tib[11:20, 1:2]
result.tib[21:30, 1:2]
x <- gsub("<U\\+[0-9A-F]{4}>", "\u03B2", "<U+03B2>")
x
Encoding(x) <- "UTF-8"
x
View(result.tib)
str_detect(result.tib$form, "<U+0314>")
which(str_detect(result.tib$form, "<U+0314>") == TRUE)
which(str_detect(result.tib$form, "0314") == TRUE)
which(str_detect(result.tib$lemma, "0314") == TRUE)
which(str_detect(result.tib$lemma, "4") == TRUE)
which(str_detect(result.tib$lemma, "14") == TRUE)
which(str_detect(result.tib$lemma, "<U+0314>") == TRUE)
wd.ct.tib
which(str_detect(result.tib$lemma, "ὁ") == TRUE)
grep("14", result.tib$lemma)
grep("+", result.tib$lemma)
grep("U", result.tib$lemma)
grep("U\+0314", result.tib$lemma)
grep("U\\+0314", result.tib$lemma)
grep("U+0314", result.tib$lemma)
grep("\\+", result.tib$lemma)
grep("\\+[0-9a-z]", result.tib$lemma)
grep("\\+[0-9a-z]{4}", result.tib$lemma)
grep("\0314", result.tib$lemma)
grep("\u0314", result.tib$lemma)
grep("\u0314", result.tib$lemma) %>%
length()
result.tib[12, 1:4]
result.tib[332, 1:4]
result.tib[32, 1:4]
result.tib$lemma <- gsub("\u0314", "u\F41", result.tib$lemma)
result.tib$lemma <- gsub("\u0314", "/u1F41", result.tib$lemma)
word.count.tb <- result.tib$lemma %>%
table()
wd.ct.tib <- word.count.tb %>%
as_tibble()
wd.ct.tib <- wd.ct.tib %>%
arrange(desc(count))
wd.ct.tib
for (i in seq_along(sent.xml)) {
word.l <- sent.xml[[i]] %>%
xml_find_all("word") %>%
xml_attrs()
word.l <- word.l[which(lengths(word.l) == 7)]
sent.workng.m <- unlist(word.l)  %>%
matrix(ncol = 7, byrow = TRUE)
colnames(sent.workng.m) <- c("id", "form", "lemma", "postag", "relation", "head", "cite")
sent.tib <-  as_tibble(sent.workng.m)
sent.tib$id <- sent.tib$id %>%
as.numeric()
sent.tib$head <- sent.tib$head %>%
as.numeric()
sent.tib <- sent.tib %>%
mutate(arc_direction = NA)
sent.tib <- sent.tib[- which(str_detect(sent.tib$relation, "Aux[xkgXKG]") == TRUE) , ]
for (j in seq_len(nrow(sent.tib))) {
if (is.numeric(sent.tib$head[j]) ) {
if (sent.tib$head[j] %>%
is_in( sent.tib$id)) {
if (sent.tib$id[j] < sent.tib$head[j]) {sent.tib$arc_direction[j] <- "parent_follows"}
if (sent.tib$id[j] > sent.tib$head[j]) {sent.tib$arc_direction[j] <- "parent_precedes"}
}
}
}
sent.tib <- sent.tib %>%
mutate(part_of_speech = NA)
for (k in seq_len(nrow(sent.tib))) {
if (str_detect(sent.tib$postag[k], "^-")) {
} else {
if (str_detect(sent.tib$postag[k], "^[a-z]") )
postag <-  str_extract(sent.tib$postag[k], "^[a-z]")
if (postag == "v") {
sent.tib$part_of_speech[k] <- "verb"
}
if (postag == "n") {
sent.tib$part_of_speech[k] <- "noun"
}
if (postag == "p") {
sent.tib$part_of_speech[k] <- "pronoun"
}
if (postag == "c") {
sent.tib$part_of_speech[k] <- "conjunction"
}
if (postag == "d") {
sent.tib$part_of_speech[k] <- "adverb"
}
if (postag == "l") {
sent.tib$part_of_speech[k] <- "def_article"
}
if (postag == "r") {
sent.tib$part_of_speech[k] <- "preposition"
}
if (postag == "a") {
sent.tib$part_of_speech[k] <- "adjective"
}
if (postag == "u") {
sent.tib$part_of_speech[k] <- "punctuation"
}
if (postag == "NA") {
sent.tib$part_of_speech[k] <- NA
}
}
}
sent.tib <- sent.tib %>%
mutate(parent_POS = NA)
sent.tib <- sent.tib %>%
mutate(parent_relation = NA)
y <- sent.tib$id
for (p in seq_len(nrow(sent.tib))) {
x <- sent.tib$head[p]
if (x %in% y) {
if (x > 0) {
sent.tib$parent_POS[p] <- sent.tib$part_of_speech[which(sent.tib$id == x) ]
sent.tib$parent_relation[p] <- sent.tib$relation[which(sent.tib$id == x) ]
}
}
}
if ( i == 1) {
result.tib <- sent.tib
} else {
result.tib <- bind_rows(result.tib, sent.tib)
}
}
grep("\u0314", result.tib$lemma) %>%
length()
word.count.tb <- result.tib$lemma %>%
table()
wd.ct.tib <- word.count.tb %>%
as_tibble()
wd.ct.tib
colnames(wd.ct.tib) <- c("lemma", "count")
wd.ct.tib <- wd.ct.tib %>%
arrange(desc(count))
wd.ct.tib
View(wd.ct.tib)
grep("\u03BF\u0314", result.tib$lemma)
grep("\u03BF\u0314", result.tib$lemma) %>%
length()
look.tib <- result.tib[grep("\u03BF\u0314", result.tib$lemma), 1:4]
View(look.tib)
result.tib$lemma <- gsub("\u03BF\u0314", "\u1F41", result.tib$lemma)
word.count.tb <- result.tib$lemma %>%
table()
wd.ct.tib <- word.count.tb %>%
as_tibble()
colnames(wd.ct.tib) <- c("lemma", "count")
wd.ct.tib <- wd.ct.tib %>%
arrange(desc(count))
wd.ct.tib
A <- matrix(c(1, 0,
0, 1,
1, 2),
3, 2,
byrow = TRUE )
require(matlib)
A
A %*% t(A)
A %*% t(A) %>%
Eigen()
diag(3)
d <- diag(3)
diag(d, 6)
I <- diag(3)
-6 * I
t(A) %*% A
t(A) %*% A %>%
Eigen()
B <- matrix(c(-4, 2,
2, 1)
2, 2,
byrow = FALSE)
B <- matrix(c(-4, 2,
2, 1)
2, 2,
byrow = FALSE)
c(-4, 2,
2, 1)
B <- matrix(c(-4, 2,
2, 1),
2, 2,
byrow = FALSE)
B
echelon(B)
echelon(B, verbose = TRUE)
svd(A)
Eigen(AA_t)
AA_t <- t(A) %*% A
det(AA_t)
Eigen(AA_t)
6^.5
x <- Eigen(AA_t)
x
x$vectors
x$vectors[, 1] %*% x$vectors[, 2]
c(-.5, 1) %*% c(-2, 1)
x$vectors[, 1] %*% x$vectors[, 1]
x$vectors[, 1] %*% x$vectors[, 1]
x$vectors[, 1]
x$vectors[, 2] %*% x$vectors[, 2]
x$vectors[, 2]
c(.5, 1) %*% c(-2, 1)
u <- c(.5, 1)
v <- c(-2, 1)
u %*% u
v %*% v
(5^.5)
v*(1 (5^.5) )
v*(1 / (5^.5) )
u %*% u
1.25^.5
(1 / (1.25^.5))
u * (1 / (1.25^.5))
t(A) %*% A %>%
Eigen()
svd(A)
80^.5
c(-8, 4)
c(-8, 4) * (1/(80^.5))
t(A) %*% A %>%
Eigen()
View(wd.ct.tib)
wd.ct.tib[14:24, ]
rm(list = ls())
setwd("~/synoikisis")
input.dir <- "../input_data/" # sets this directory holding treebank files. This code must be adjusted to reflect your own directory structure.
files.v <- dir(path=input.dir, pattern=".*xml") # A vector with names of each XML file  from input directory.
doc.xml <- read_xml(file.path(input.dir, files.v[3]))
doc.xml <- read_xml(file.path(input.dir, files.v[1]))
doc.xml <- read_xml(file.path(input.dir, files.v[3]))
sent.xml <- xml_find_all(doc.xml, "//sentence")
sent.xml
sent.xml
word.l <- sent.xml[[1]] %>%
xml_find_all("word") %>%
xml_attrs()
word.l
class(word.l)
